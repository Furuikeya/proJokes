{"version":3,"sources":["JokeBox.js","JokeButton.js","App.js","serviceWorker.js","index.js"],"names":["JokeBox","joke","setup","delivery","className","JokeButton","jokeClick","onClick","App","state","jokeButtonClick","bind","fetch","then","response","json","result","type","setState","this","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qOAceA,G,KAVC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/B,OACC,yBAAKC,UAAU,WACP,6BAAMH,GACN,6BAAMC,GACN,6BAAMC,MCMDE,EAZI,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACrB,OACC,4BACCF,UAAU,+DACVG,QAASD,GAFV,SCoDaE,G,wDAlDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,KAAM,mBACNC,MAAO,gBACPC,SAAU,qBAEZ,EAAKO,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAPX,E,8DAYK,IAAD,OAChBC,MAAM,iDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,MAAoB,WAAhBA,EAAOC,MAEP,EAAKC,SAAS,CAAEjB,KAAMe,EAAOf,OAC7B,EAAKiB,SAAS,CAAEhB,MAAO,KACvB,EAAKgB,SAAS,CAAEf,SAAU,OAIxB,EAAKe,SAAS,CAAEhB,MAAOc,EAAOd,QAC9B,EAAKgB,SAAS,CAAEf,SAAUa,EAAOb,WACjC,EAAKe,SAAS,CAAEjB,KAAM,W,+BAMtB,IAAD,EACyBkB,KAAKV,MAA9BR,EADA,EACAA,KAAMC,EADN,EACMA,MAAOC,EADb,EACaA,SACpB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CACAE,UAAWa,KAAKT,kBAEhB,kBAAC,EAAD,CACAT,KAAMA,EACNC,MAAOA,EACPC,SAAUA,IAEV,uBAAGiB,KAAK,yCAAR,iB,GA7CUC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bbf91340.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\n\r\n\r\nconst JokeBox = ({ joke, setup, delivery }) => {\r\n\treturn (\r\n\t\t<div className='joke f3'>\r\n          <div>{joke}</div>\r\n          <div>{setup}</div>\r\n          <div>{delivery}</div>  \r\n        </div>\r\n\t)\r\n}\r\n\r\nexport default JokeBox;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst JokeButton = ({ jokeClick }) => {\r\n\treturn (\r\n\t\t<button \r\n\t\t\tclassName='joke-button bg-gold bw4 br-pill b--dark-red grow grow:hover '\r\n\t\t\tonClick={jokeClick}\r\n\t\t\t>joke\r\n\t\t</button>\r\n\t)\r\n\t\t\r\n}\r\n\r\n\r\nexport default JokeButton;","import React, {Component} from 'react';\r\nimport JokeBox from './JokeBox';\r\nimport JokeButton from './JokeButton';\r\nimport './App.css';\r\nimport 'tachyons';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      joke: 'Click the button',\r\n      setup: 'to get a joke',\r\n      delivery: 'about programmers',\r\n    }\r\n    this.jokeButtonClick = this.jokeButtonClick.bind(this);\r\n  }\r\n\r\n \r\n\r\n  jokeButtonClick() {\r\n    fetch('https://sv443.net/jokeapi/v2/joke/Programming')\r\n    .then(response => response.json())\r\n    .then(result => {\r\n      if (result.type === 'single') {\r\n        return (\r\n          this.setState({ joke: result.joke }),\r\n          this.setState({ setup: '' }),\r\n          this.setState({ delivery: '' })\r\n          )\r\n      } else {\r\n          return (\r\n            this.setState({ setup: result.setup }),\r\n            this.setState({ delivery: result.delivery }),\r\n            this.setState({ joke: '' })\r\n          )\r\n        } \r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {joke, setup, delivery} = this.state;\r\n    return (\r\n      <div className='app'>\r\n        <JokeButton \r\n        jokeClick={this.jokeButtonClick}\r\n        />\r\n        <JokeBox \r\n        joke={joke} \r\n        setup={setup} \r\n        delivery={delivery}\r\n        />\r\n        <a href='https://github.com/Furuikeya/projokes'> GitHub </a>  \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}